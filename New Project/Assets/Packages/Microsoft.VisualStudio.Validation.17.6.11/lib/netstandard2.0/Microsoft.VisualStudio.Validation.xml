<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Validation</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Assumes">
            <summary>
            Common runtime checks that throw <see cref="T:Microsoft.Assumes.InternalErrorException" /> exceptions upon failure.
            </summary>
            <content>
            Contains the inner exception thrown by Assumes.
            </content>
        </member>
        <member name="M:Microsoft.Assumes.NotNull``1(``0)">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.NotNull``1(System.Nullable{``0})">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty(System.String)">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is null or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is null or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Null``1(``0)">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is not null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Null``1(System.Nullable{``0})">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified value is not null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Is``1(System.Object)">
            <summary>
            Throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> if the specified object is not of a given type.
            </summary>
            <typeparam name="T">The type the value is expected to be.</typeparam>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.NotReachable">
            <summary>
            Unconditionally throws an <see cref="T:Microsoft.Assumes.InternalErrorException" />.
            </summary>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Microsoft.Assumes.NotReachable``1">
            <summary>
            Unconditionally throws an <see cref="T:Microsoft.Assumes.InternalErrorException" />.
            </summary>
            <typeparam name="T">The type that the method should be typed to return (although it never returns anything).</typeparam>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Present``1(``0)">
            <summary>
            Verifies that a value is not null, and throws <see cref="T:Microsoft.Assumes.InternalErrorException" /> about a missing service otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String,System.Exception,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String,System.Exception)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Assumes.InternalErrorException">
            <summary>
            The exception that is thrown when an internal assumption failed.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.EventHandlerExtensions">
            <summary>
            Extension methods to make it easier to safely invoke events.
            </summary>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <typeparam name="T">The type of EventArgs.</typeparam>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="T:Microsoft.ExceptionExtensions">
            <summary>
            Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.ExceptionExtensions.AddData``1(``0,System.String,System.Object[])">
            <summary>
            Adds data to the Data member of <paramref name="exception" /> before returning the modified exception.
            </summary>
            <typeparam name="T">The type of exception being modified.</typeparam>
            <param name="exception">The exception to add data to.</param>
            <param name="key">The key to use for the added data.</param>
            <param name="values">The values to add with the given <paramref name="key" />.</param>
            <returns>A reference to the same <paramref name="exception" />.</returns>
            <remarks>
            <para>This method should be used to add context (beyond the message and callstack we normally get) to the exception
            that would be useful when debugging Watson crashes.</para>
            <para>Do not use this method when you expect the exception to be handled.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.IDisposableObservable">
            <summary>
            A disposable object that also provides a safe way to query its disposed status.
            </summary>
        </member>
        <member name="P:Microsoft.IDisposableObservable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <value><see langword="true" /> if this instance has been disposed.</value>
        </member>
        <member name="T:Microsoft.PrivateErrorHelpers">
            <summary>
            Common utility methods used by the various error detection and reporting classes.
            </summary>
        </member>
        <member name="M:Microsoft.PrivateErrorHelpers.TrimGenericWrapper(System.Type,System.Type)">
            <summary>
            Trims away a given surrounding type, returning just the generic type argument,
            if the given type is in fact a generic type with just one type argument and
            the generic type matches a given wrapper type.  Otherwise, it returns the original type.
            </summary>
            <param name="type">The type to trim, or return unmodified.</param>
            <param name="wrapper">The SomeType&lt;&gt; generic type definition to trim away from <paramref name="type" /> if it is present.</param>
            <returns><paramref name="type" />, if it is not a generic type instance of <paramref name="wrapper" />; otherwise the type argument.</returns>
        </member>
        <member name="M:Microsoft.PrivateErrorHelpers.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Microsoft.Report">
            <summary>
            Common runtime checks that trace messages and invoke an assertion failure,
            but does *not* throw exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNotPresent``1(``0)">
            <summary>
            Verifies that a value is not null, and reports an error about a missing MEF component otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Microsoft.Report.If(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object[])">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.Fail(System.String)">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="M:Microsoft.Report.Fail(System.String,System.Object[])">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="T:Microsoft.Requires">
            <summary>
            Common runtime checks that throw ArgumentExceptions upon failure.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNull(System.IntPtr,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is IntPtr.Zero.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see cref="F:System.IntPtr.Zero" />.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNull(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNull``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the return value of the task.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNullAllowStructs``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
            <remarks>
            This method exists for callers who themselves only know the type as a generic parameter which
            may or may not be a class, but certainly cannot be null.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null or empty.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="null" /> or empty.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null, empty, or whitespace.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="null" /> or empty.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements.
            </summary>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements.
            </summary>
            <typeparam name="T">The type produced by the enumeration.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements.
            </summary>
            <typeparam name="T">The type of value in the collection.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullEmptyOrNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NullOrNotNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is not null
            <em>and</em> has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotEmpty(System.Guid,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see cref="F:System.Guid.Empty" />.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is an empty guid (<see cref="F:System.Guid.Empty" />.)</exception>
        </member>
        <member name="M:Microsoft.Requires.Range(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.FailRange(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if a condition does not evaluate to true.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if a condition does not evaluate to true.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="parameterName">The name of the parameter to blame in the exception, if thrown.</param>
            <param name="resourceManager">The resource manager from which to retrieve the exception message. For example: <c>Strings.ResourceManager</c>.</param>
            <param name="resourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceManager" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition" /> is <see langword="false" />.</exception>
            <remarks>
            This overload allows only loading a localized string in the error condition as an optimization in perf critical sections over the simpler
            to use <see cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String)" /> overload.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object)">
            <inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object,System.Object)" />
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object,System.Object)">
            <inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" />
            <param name="unformattedMessageResourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <param name="condition"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='condition']" /></param>
            <param name="parameterName"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='parameterName']" /></param>
            <param name="resourceManager"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='resourceManager']" /></param>
            <param name="arg1">The first formatting argument.</param>
            <param name="arg2">The second formatting argument.</param>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object[])">
            <inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" />
            <param name="unformattedMessageResourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <param name="condition"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='condition']" /></param>
            <param name="parameterName"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='parameterName']" /></param>
            <param name="resourceManager"><inheritdoc cref="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='resourceManager']" /></param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.String)">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Defined``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> if a given value is not a named value of the enum type.
            </summary>
            <typeparam name="TEnum">The type of enum that may define the <paramref name="value" />.</typeparam>
            <param name="value">The value that may be named by <typeparamref name="TEnum" />.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
        </member>
        <member name="M:Microsoft.Requires.NotDefault``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified parameter's value is equal to the
            default value of the <see cref="T:System.Type" /> <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception. If this argument is omitted (explicitly writing <see langword="null" /> does not qualify), the expression used in the first argument will be used as the parameter name.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="null" /> or empty.</exception>
        </member>
        <member name="M:Microsoft.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String)">
            <summary>
            Throws an exception if <paramref name="values" /> is null,
            <paramref name="predicate" /> is null, or if <paramref name="values" /> is not null
            <em>and</em> has an element which does not match the given predicate.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="predicate">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate" /> or <paramref name="values" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String,System.Object[])">
            <summary>
            Throws an exception if <paramref name="values" /> is null,
            <paramref name="predicate" /> is null, or if <paramref name="values" /> is not null
            <em>and</em> has an element which does not match the given predicate.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="predicate">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.Requires.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyArray">
            <summary>
              Looks up a localized string similar to '{0}' must contain at least one element..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyGuid">
            <summary>
              Looks up a localized string similar to '{0}' cannot be an empty guid..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to '{0}' cannot be an empty string ("") or start with the null character..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_NotEnum">
            <summary>
              Looks up a localized string similar to The value of argument '{0}' ({1}) is invalid for Enum type '{2}'..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to '{0}' cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_StructIsDefault">
            <summary>
              Looks up a localized string similar to '{0}' cannot be the default value defined by '{1}'..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_Whitespace">
            <summary>
              Looks up a localized string similar to The argument cannot consist entirely of white space characters..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.InternalExceptionMessage">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please contact Microsoft Support..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.ServiceMissing">
            <summary>
              Looks up a localized string similar to Cannot find an instance of the {0} service..
            </summary>
        </member>
        <member name="T:Microsoft.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ValidatedNotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ValidatedNotNullAttribute" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Verify">
            <summary>
            Common runtime checks that throw exceptions upon failure.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.OperationWithHelp(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.FailOperation(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" />.
            </summary>
            <returns>
            Nothing.  This method always throws.
            The signature claims to return an exception to allow callers to throw this method
            to satisfy C# execution path constraints.
            </returns>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(Microsoft.IDisposableObservable,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> if an object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(System.Boolean,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.HResult(System.Int32,System.Boolean)">
            <summary>
            Throws an exception if the given value is negative.
            </summary>
            <param name="hresult">The HRESULT corresponding to the desired exception.</param>
            <param name="ignorePreviousComCalls">If true, prevents <c>ThrowExceptionForHR</c> from returning an exception from a previous COM call and instead always use the HRESULT specified.</param>
            <remarks>
            No exception is thrown for S_FALSE.
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>RKW7cHGomn5B1fuhyaDKVSTW59zqjvcOR6y7i56KrB8=</DigestValue></Reference></SignedInfo><SignatureValue>03Qkmkdy9BOYTexZVLBxVn8IoR+8Bae+WzCODkP25rUMn98ko5Vqm+LkZQ/LlD2ULW+TzTYn2YUDblzoqhGukP8Yz1RCNDBxLf1guWreRZOKAC32T8TrY11AmbaX18zkQE5Wdjve3+Q3FYNeo/ss3C7qJk2hAJOgJJ59ZCor0ccB0QDF3Qq7etwiysxcbuZ5EtCLMgv/xvnUFQUPDyox5DbELhMoBTmlRDgMVvnGkAuMeSO9sWidxJr1oc6l7t6Ce0vBkCewxaw4NGCycd7HcWMVcnkzriQmkdMHBS4Vc8wcym92PX3oJH/1vMMVFQFxnRMP/xbSyUl8+fLRsc+Ibg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIGAzCCA+ugAwIBAgITMwAAAs3zZL/41ExdUQAAAAACzTANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIyMDUxMjIwNDYwMloXDTIzMDUxMTIwNDYwMlowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2QIDAQABo4IBgjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFNFsph+Aj+7NfskJLRMG3C0LkfWcMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIzMDAxMis0NzA1MzAwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQBOy0rrjTmwgVmLrbcSQIIpVyfdhqclf304slx2f/S2817PzHypz8EcnZZgNmpNKxliwxYfPcwFhxSPLfSS8KXf1UaFRN/lss0yLJHWwZx239co6P/tLaR5Z66BSXXA0jCLB/k+89wpWPulp40k3raYNWP6Szi12aWY2Hl0IhcKPRuZc1HEnfGFUDT0ABiApdiUUmgjZcwHSBQheTzSqF2ybRKg3D2fKA6zPSnTu06lBOVangXug4IGNbGWJ0A/vy1pc+Q9MAq4jYBkP01lnsTMMJxKpSMH5CHDRcaNEDQ/+mGvQ0wFMpJNkihkj7dJC7R8TRJ9hib3DbX6IVWP29LbshdOXlxN3HbWGW3hqFNcUIsT2QJU3bS5nhTZcvNrgVW8mwGeFLdfBf/1K7oFUPVFHStbmJnPtknUUEAnHCsFxjrmIGdVC1truT8n1sc6OAUfvudzgf7WV0Kc+DpIAWXqrPWGmCxXykZUB1bZkIIRR8web/1haJ8Q1Zbz8ctoKGtLvWfmZSKb6KGUb5ujrV8XQIzAXFgQLJwUa/zo+bN+ehA3X9pf7C8CxWBOtbfjBIjWHctKVy+oDdw8U1X9qoycVxZBX4404rJ3bnR7ILhDJPJhLZ78KPXzkik+qER4TPbGeB04P00zI1JY5jd5gWFgFiORMXQtYp7qINMaypjllQ==</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIAGCSqGSIb3DQEHAqCAMIIXAQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZIhvcNAQkQAQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQgab4Tc8Xt7dQHUB3Zs3QPeXqqIpvarujdyMzel8O8eDgCBmP3WzW4QBgTMjAyMzAzMTcxNDM1NDIuMTM0WjAEgAIB9KCB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpBMjQwLTRCODItMTMwRTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEXswggcnMIIFD6ADAgECAhMzAAABuAjUwbh54FFJAAEAAAG4MA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIyMDkyMDIwMjIxNloXDTIzMTIxNDIwMjIxNlowgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QTI0MC00QjgyLTEzMEUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCcG7H8ERxEZ+QveUDxp9+7SebzomPWlo3iA8aYGl2mBoqrMNBtHLwit2Lpa6nphH9gpBknXDiQBfvhKoTkqqztd5xnI6sOoRTZ7BsCgDcs3XcJzjtI89ZXwSCLu+023zb52lm8EkbtA0xhwO5+z0dDGCfWwvx6KUraWxX+tOiynE1p8GlLhHQIcehQKoNa5ILoIrrmmsSssUZHYxWSyhVxFy/adNT7cEtHxur2YkVZxCoHmpdk3i73QCKmqQcJbT2In4Kp6e2eFSTHD6NE1pkTVRTnB0TcFh3oTfcYOroCBlz6O4TKVqz4IOJqBztnqXNE9+q4JvYZQ65dvGxuU2pJlezSffJGxeZYLZa6ME+nnMBFbbi3eGtIM2KoWp1u82hWZw37ecjHscufYnxE3c6cAK49pyQMiLIqtT2N1z5tplDC5QApLKnpRyn1ooSvxXocP5s4qLwVcJJK/xtBdfTloEfjAVCon8KTskIiwMa6r1Z3wmOEIyQmYhyLkteRwkP0yLf0I+MdVr0WtVKo55qS7uP8gWFmbHb2aKvElyO4jrO5rnnACXhJGJTOojpDIoIcxIY0CvU4T6aALZbl2y+6iBxq3xZR5l/+LKHO449Y/Lgd9VN+ICZQdl6YYzGk/hPjvUiJpP+hkVfUpvAvPBZ5ptlXcDJbgjQFMzxY37x8dwIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFMT9RyU3hcMzWKNZ437nF7lH0GluMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQCfbpPJosKTKCsNw/feqYhM23oABsZAAR2J9rz9oW6p5EvVPe7P+kJcmToRhbFbnWoi3kWWU7GhuYUdKArgSDWf5XpaOccx3PpgTqQV6cUmltYaqMWgi7FR9RAbc+4p9uR48vno7gXIpR+hGdGbTcZlhiEM/EdALktE4+FYCVxyJVz/XVToshqPVXpa5PhRsfwQvohLgminfyLMqRz4glAoedgxnPdbNku5XUMdR+ApYzgLWpw3270nowEli6P7N8NFzAGw7q1jZ7NF4nQBdkZy9T2saDss/VWGpDRiuBd/7iUWZ1YG7AmLsDV9QZksDNWWz0p4IDUhk2cfxUNtCY/7paytK8gG7zWzW+JJGkuGu+u4nwqr1DhS5VE/DzeN4YZXcSOshzzDliLSaRByGQYkzSm5QbGGyK4IW9WJvbX0rC2uWSQ81WTZ3UX4VKiTslxfglZvTrVZhQxvZCMDOkAF/ENIn+9tc+FTs2Tbw/JLYNZSPl414FwyVbN4eO7DLvRl0mM5Mvu3bYJnN4kT5HWt2FUXZjybTRTdDS8m3LLBO74RQoo++XgxkARatAOClRurgXa+lE1sBNFSh8Qc9gaRr5+wQrPucsZxfh1eglInJA6qj4vyCO2bLHfRGz/bs4+JbpXVwwD61hrXRqvsCtKHZRjVbgjMbC94Z/PiojvVIjCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLXMIICQAIBATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QTI0MC00QjgyLTEzMEUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAHBrXlahcfyG0ylxy3rlwj0TzA+7oIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQACBQDnvtgfMCIYDzIwMjMwMzE3MjAxNDIzWhgPMjAyMzAzMTgyMDE0MjNaMHcwPQYKKwYBBAGEWQoEATEvMC0wCgIFAOe+2B8CAQAwCgIBAAICJBoCAf8wBwIBAAICEVAwCgIFAOfAKZ8CAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQCcY2IjUDEysO047bE9fEBO01mqvcWfLSBpgsZLTQMsj28BBShBJpoMGv75Vdi7du2tQ+uzp/R1nZeX5kZI/sEQ71ufFF8ol8HKH2ATpb/stxfmcWzjaZ9UwHqW3Rn9LFndV80iW6KVVNH7W0mYc41wy0gCtDVK4Jibj1pH6qvDXjGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABuAjUwbh54FFJAAEAAAG4MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIELHWfmkoK8Fq48v+wkXgloazPmnL/DYIodfyWDEXHI6MIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgKOvWOKBwO0OKUvmNTbAX66SGE3lrD3hk2potF9Dw+x8wgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAbgI1MG4eeBRSQABAAABuDAiBCDNwnr/6fFMIHpyf+8cfwCmiXjJFGQ/M7JM5sw4NNbN1zANBgkqhkiG9w0BAQsFAASCAgArIwOQoHIwZr6g2RTU7XhixuYN7l9qOA4WVNOlQHHjH/RHDwHIIr06dL68wGk/2NY8MZURjcdcG7NZByaYDIlOyXvrCPWrSQO+Aij40RFAGo1FNVLNeNgNHq6ta5T79l7Uc1w+5yF2LReuFw4BoBoLEeb2IIAjSdGmBPjOQ6AUt4X8nuxGsDMCOsihj0v3P6m3f329Tq2+lwU8beuBCn2uGxfubDsoHeljUSD2En8vG05Gr7uJ7on0q3oPzTDbo58gsFHcz49IvMHvtixgBCZ9KS8IBhWhAsdmz8l0IZYn5Vp8kG0GSayzry94laeOe8u5H+6cWBcVNgglTwZb63l0JiGKZXxuYpeQ+mw5bPriSRYPLvo2tyWykdyqstIZmS02vwcwlhgGcn45tWT4WxX3PUzuxjE0Qis7eTp9ALyCez/oK2IziOXb238K7zZBmaHd2Ws4WOLid3WE6aJ2FtT/EitalEPwv51elPX8u+MOIS4MIgCfXKWjy2NIBwJsPpa3V0IwfVlaKjdQrhZDQ0objzW6iXh5niGnJ084lUGXEMnJ4MTW5LnyuiiFS4AZFbgBxa7XExaKJIDsiK8YJWVe6ak60dGx8L/1vL+F5rjM77Ujpx3Xmmvp2wpjpMCCXKhQJ4lPuLKzBZnnOrwFCKG211RIWLI9l7POo7Bz18vXVgAAAAA=</CounterSignature></Object></Signature></doc>
